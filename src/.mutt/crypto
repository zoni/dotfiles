# Enable gpgme backend
set crypt_use_gpgme

set crypt_autosign = yes
set crypt_opportunistic_encrypt = yes
#set pgp_encrypt_self = yes

# {{{ Old settings
# Automatically PGP encrypt replies to messages which are encrypted
#set pgp_replyencrypt
## Automatically PGP sign replies to messages which are signed
#set pgp_replysign
## Automatically PGP sign replies to messages which are encrypted
#set pgp_replysignencrypted
## The number of seconds after which a cached passphrase will expire if not used
#set pgp_timeout=1800 

## Decode application/pgp
#set pgp_decode_command="gpg2 --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"
## Verify a pgp/mime signature
#set pgp_verify_command="gpg2 --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"
## Decrypt a pgp/mime attachment
#set pgp_decrypt_command="gpg2 --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"
## Create a pgp/mime signed attachment
## set pgp_sign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
#set pgp_sign_command="gpg2 --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
## Create a application/pgp signed (old-style) message
## set pgp_clearsign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
#set pgp_clearsign_command="gpg2 --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
## Create a pgp/mime encrypted attachment
## set pgp_encrypt_only_command="/usr/lib/mutt/pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
#set pgp_encrypt_only_command="/usr/lib/mutt/pgpewrap gpg2 --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
## Create a pgp/mime encrypted and signed attachment
## set pgp_encrypt_sign_command="/usr/lib/mutt/pgpewrap gpg-2comp %?p?--passphrase-fd 0? -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
#set pgp_encrypt_sign_command="/usr/lib/mutt/pgpewrap gpg2 %?p?--passphrase-fd 0? --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
## Import a key into the public key ring
#set pgp_import_command="gpg2 --no-verbose --import %f"
## Export a key from the public key ring
#set pgp_export_command="gpg2 --no-verbose --export --armor %r"
## Verify a key
#set pgp_verify_key_command="gpg2 --verbose --batch --fingerprint --check-sigs %r"
## Read in the public key ring
#set pgp_list_pubring_command="gpg2 --no-verbose --batch --quiet --with-colons --list-keys %r" 
## Read in the secret key ring
#set pgp_list_secring_command="gpg2 --no-verbose --batch --quiet --with-colons --list-secret-keys %r" 
## Fetch keys
## set pgp_getkeys_command="pkspxycwrap %r"
## pattern for good signature - may need to be adapted to locale!
## set pgp_good_sign="^gpgv?: Good signature from "
## OK, here's a version which uses gnupg's message catalog:
## set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"
## This version uses --status-fd messages
#set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"
# }}}
